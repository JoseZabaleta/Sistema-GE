package vista;

import conexion.Conexion;
import controlador.Ctrl_Categoria;
import controlador.Ctrl_Producto;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;
import modelo.Producto;

/**
 *
 * @author josez
 */
public class InterGestionarProducto extends javax.swing.JInternalFrame {

    private int idProducto;
    int obtenerIdCategoriaCombo = 0;

    public InterGestionarProducto() {
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.setTitle("Gestionar Productos");
        this.CargarTablaProductos();
        this.CargarCombocategoria();

        //insetar imagen el jlabelwallpaper
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 500, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_administarrProductos = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel_nombre = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel_nombre1 = new javax.swing.JLabel();
        jLabel_nombre2 = new javax.swing.JLabel();
        jLabel_nombre3 = new javax.swing.JLabel();
        jLabel_nombre4 = new javax.swing.JLabel();
        jLabel_nombre5 = new javax.swing.JLabel();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_descripcion = new javax.swing.JTextField();
        ComboBox_iva = new javax.swing.JComboBox<>();
        ComboBox_categoria = new javax.swing.JComboBox<>();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_administarrProductos.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_administarrProductos.setForeground(new java.awt.Color(255, 255, 255));
        lbl_administarrProductos.setText("Administrar Productos");
        getContentPane().add(lbl_administarrProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 730, 270));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(204, 255, 204));
        jButton_actualizar.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 90, -1));

        jButton_eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_eliminar.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 50, 130, 270));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_nombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_nombre.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_nombre.setText("Nombre: ");
        jPanel3.add(jLabel_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 8, 100, -1));

        txt_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombreActionPerformed(evt);
            }
        });
        jPanel3.add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 170, -1));

        jLabel_nombre1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_nombre1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_nombre1.setText("Cantidad:");
        jPanel3.add(jLabel_nombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 100, -1));

        jLabel_nombre2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_nombre2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_nombre2.setText("Precio:");
        jPanel3.add(jLabel_nombre2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 100, -1));

        jLabel_nombre3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_nombre3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_nombre3.setText("Descripcion:");
        jPanel3.add(jLabel_nombre3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 100, -1));

        jLabel_nombre4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_nombre4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_nombre4.setText("IVA:");
        jPanel3.add(jLabel_nombre4, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 100, -1));

        jLabel_nombre5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_nombre5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_nombre5.setText("Categoria:");
        jPanel3.add(jLabel_nombre5, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 100, -1));

        txt_cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cantidadActionPerformed(evt);
            }
        });
        jPanel3.add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 170, -1));

        txt_precio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_precioActionPerformed(evt);
            }
        });
        jPanel3.add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 170, -1));

        txt_descripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_descripcionActionPerformed(evt);
            }
        });
        jPanel3.add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 170, -1));

        ComboBox_iva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione IVA:", "Exento IVA", "IVA 19%", " " }));
        ComboBox_iva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox_ivaActionPerformed(evt);
            }
        });
        jPanel3.add(ComboBox_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, 150, -1));

        ComboBox_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Categoria:", " " }));
        ComboBox_categoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox_categoriaActionPerformed(evt);
            }
        });
        jPanel3.add(ComboBox_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 40, 150, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 870, 100));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(-1, 6, 890, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed
        // TODO add your handling code here:
                                                    
        // TODO add your handling code here:
        Producto producto = new Producto();
        Ctrl_Producto controlProducto = new Ctrl_Producto();
        String iva = "";
        String categoria = "";
        iva = ComboBox_iva.getSelectedItem().toString().trim();
        categoria = ComboBox_categoria.getSelectedItem().toString().trim();

        //VALIDAR CAMPOS
        if (txt_nombre.getText().equals("")
                || txt_cantidad.getText().equals("") || txt_precio.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");

        } else {
            //consulta para validar duplicidad de producto
            
                if (iva.equalsIgnoreCase("Seleccione IVA:")) {
                    JOptionPane.showMessageDialog(null, "Seleccion porcentaje IVA");
                } else {
                    if (categoria.equalsIgnoreCase("Seleccione Categoria:")) {
                        JOptionPane.showMessageDialog(null, "Seleccione una categoria");
                    } else {
                        try {
                            producto.setNombre(txt_nombre.getText().trim());
                            producto.setCantidad(Integer.parseInt(txt_cantidad.getText().trim()));
                            String precioTXT = "";
                            double Precio = 0.0;
                            precioTXT = txt_precio.getText().trim();
                            boolean aux = false;
                            /**
                             * Si el usuario ingresa (coma) como punto decimal,
                             * lo transforma en (punto)
                             */
                            for (int i = 0; i < precioTXT.length(); i++) {
                                if (precioTXT.charAt(i) == ',') {
                                    String precioNuevo = precioTXT.replace(",", ".");
                                    Precio = Double.parseDouble(precioNuevo);
                                    aux = true;
                                }
                            }
                            //evaluar la consicion
                            if (aux == true) {
                                producto.setPrecio(Precio);
                            } else {
                                Precio = Double.parseDouble(precioTXT);
                                producto.setPrecio(Precio);
                            }
                            producto.setDescripcion(txt_descripcion.getText().trim());
                            //iva
                            if (iva.equalsIgnoreCase("Exento IVA")) {
                                producto.setPorcentajeIva(0);

                            } else if (iva.equalsIgnoreCase("IVA 19%")) {
                                producto.setPorcentajeIva(19);
                            }
                            //idCategoria
                            this.ObtenerIdCategoria();
                            producto.setIdCategoria(obtenerIdCategoriaCombo);
                            producto.setEstado(1);

                            if (controlProducto.actualizar(producto,idProducto)) {
                                JOptionPane.showMessageDialog(null, "Registro Actualizado");
                                this.CargarCombocategoria();
                                this.CargarTablaProductos();
                                this.ComboBox_iva.setSelectedItem("Seleccione IVA:");
                                this.Limpiar();
                                
                            } else {
                                JOptionPane.showMessageDialog(null,"Error al actualizar producto");
                            }

                        } catch (HeadlessException| NumberFormatException e) {
                            System.out.println("Error en : "+e);
                        }
                    }
                }

            
        }


                                         
    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        // TODO add your handling code here:
        Ctrl_Producto controlProducto = new Ctrl_Producto();
        if (idProducto == 0) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        } else {
            if (!controlProducto.eliminar(idProducto)) {
                JOptionPane.showMessageDialog(null, "Producto Eliminado");
                this.CargarTablaProductos();
                this.CargarCombocategoria();
                this.Limpiar();
            }else{
            JOptionPane.showMessageDialog(null,"Error al eliminar Producto");
            }
        }

    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void txt_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombreActionPerformed

    private void txt_cantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cantidadActionPerformed

    private void txt_precioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_precioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_precioActionPerformed

    private void txt_descripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_descripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_descripcionActionPerformed

    private void ComboBox_ivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox_ivaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBox_ivaActionPerformed

    private void ComboBox_categoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox_categoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBox_categoriaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBox_categoria;
    private javax.swing.JComboBox<String> ComboBox_iva;
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JLabel jLabel_nombre;
    private javax.swing.JLabel jLabel_nombre1;
    private javax.swing.JLabel jLabel_nombre2;
    private javax.swing.JLabel jLabel_nombre3;
    private javax.swing.JLabel jLabel_nombre4;
    private javax.swing.JLabel jLabel_nombre5;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    private javax.swing.JLabel lbl_administarrProductos;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables
 /*
     * Metodo para limpiar campos tabla
     *  
     */
    private void Limpiar(){
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");
        txt_descripcion.setText("");
        ComboBox_iva.setSelectedItem("Seleccione IVA:");
        ComboBox_categoria.setSelectedItem("Seleccione Categoria");
    }
    
    
    
    
    
    
    
    /*
     * Metodo para cargar las categorias
     *  
     */
    private void CargarCombocategoria() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_categoria";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            ComboBox_categoria.removeAllItems();
            ComboBox_categoria.addItem("Seleccione categoria:");
            while (rs.next()) {

                ComboBox_categoria.addItem(rs.getString("descripcion"));

            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar categorias" + e);
        }

    }

    /*
    metodo para mostrar todas las productos registradas
     */
    String descipcionCategoria = "";
    double precio = 0.0;
    int porcentajeIva = 0;
    double IVA = 0.0;

    private void CargarTablaProductos() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select p.idProducto,p.nombre,p.cantidad,p.precio,p.descripcion,p.porcentajeIva,c.descripcion,p.estado from tb_producto As p, tb_categoria As c where p.idCategoria = c.idCategoria;";
        Statement st;

        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterGestionarProducto.jTable_productos = new JTable(model);
            InterGestionarProducto.jScrollPane1.setViewportView(InterGestionarProducto.jTable_productos);

            model.addColumn("N°");
            model.addColumn("NOMBRE");
            model.addColumn("CANTIDAD");
            model.addColumn("PRECIO");
            model.addColumn("DESCRIPCION");
            model.addColumn("IVA");
            model.addColumn("CATEGORIA");
            model.addColumn("ESTADO");

            while (rs.next()) {

                precio = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");
                Object fila[] = new Object[8];

                for (int i = 0; i < 8; i++) {
                    fila[i] = rs.getObject(i + 1);
                    if (i == 5) {
                        this.calcularIva(precio, porcentajeIva);

                    } else {
                        fila[i] = rs.getObject(i + 1);
                    }

                }
                model.addRow(fila);

            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla productos " + e);
        }

        jTable_productos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_productos.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idProducto = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosProductoSeleccionado(idProducto);//metodo
                }
            }
        });

    }

    /**
     * Metodos para calcular iva
     */
    private double calcularIva(double precio, int iva) {
        int p_iva = iva;
        switch (p_iva) {
            case 0:
                IVA = 0.0;
                break;
            case 19:
                IVA = precio * 0.12;
                break;
            default:
                break;

        }
        //redondear decimales
        IVA = IVA / 100.0;
        IVA = (double) Math.round(IVA * 100) / 100;
        return IVA;
    }

    /**
     * Metodos que envia datos seleccionados de la tabla gestionar productos
     */
    private void EnviarDatosProductoSeleccionado(int idProducto) {
        try {

            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement(
                    "select * from tb_producto where idProducto = '" + idProducto + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                txt_nombre.setText(rs.getString("nombre"));
                txt_cantidad.setText(rs.getString("cantidad"));
                txt_precio.setText(rs.getString("precio"));
                txt_descripcion.setText(rs.getString("descripcion"));
                int iva = rs.getInt("porcentajeIva");
                switch (iva) {
                    case 0:
                        ComboBox_iva.setSelectedItem("Exento IVA");
                        break;
                    case 19:
                        ComboBox_iva.setSelectedItem("IVA 19%");
                        break;
                    default:
                        ComboBox_iva.setSelectedItem("Seleccione IVA:");
                        break;

                }
                int idCate = rs.getInt("idCategoria");
                ComboBox_categoria.setSelectedItem(relacionarCategorias(idCate));

            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error Seleccionar Producto");
        }
    }

    /**
     * Metodo para relacionar categorias
     */
    private String relacionarCategorias(int idCategoria) {

        String sql = "select descripcion from tb_categoria where idCategoria ='" + idCategoria + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {

                descipcionCategoria = rs.getString("descripcion");

            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el id de la categoria" + e);
        }
        return descipcionCategoria;
    }
       private int ObtenerIdCategoria() {
        String sql = "select * from tb_categoria where descripcion ='" + ComboBox_categoria.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = conexion.Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("idCategoria");

            }
        } catch (SQLException e) {
            System.out.println("Error al obtener id Categoria");
        }
        return obtenerIdCategoriaCombo;
    }
}

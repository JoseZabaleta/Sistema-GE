package vista;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 *
 * @author josez
 */
public class InterGraficarVentas extends javax.swing.JInternalFrame {

    ArrayList<Integer> listaCantidad = new ArrayList<>();
    ArrayList<String> listaFechas = new ArrayList<>();
    int cantidadResultados = 0;
    String[] vector_fechaVentas;
    int[] vector_Status_Cantidad;

    public InterGraficarVentas() {
        initComponents();
        this.setSize(new Dimension(550, 650));
        this.setTitle("Historial de Ventas");
        this.MetodoContador();
        vector_fechaVentas = new String[cantidadResultados];
        vector_Status_Cantidad = new int[cantidadResultados];
        this.MetodoAlmacenaDatos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Seleccione fechas");
        jLabel1.setAutoscrolls(true);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo para determinar la cantidad de resultados a grafuicar
     */
    private int MetodoContador() {

        try {
            Connection cn = conexion.Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("select fechaVenta, count(fechaVenta) as Ventas from tb_cabecera_venta "
                    + "where fechaVenta BETWEEN '" + InterGraficas.fecha_inicio
                    + "' and '" + InterGraficas.fecha_fin + "' group by fechaVenta;");
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                cantidadResultados++;

            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error en :" + e);
        }
        return cantidadResultados;
    }

    /**
     * Metodo para almacenar en las listas los datos a graficar
     */
    private void MetodoAlmacenaDatos() {
        try {
            Connection cn = conexion.Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("select fechaVenta, count(fechaVenta) as Ventas from tb_cabecera_venta "
                    + "where fechaVenta BETWEEN '" + InterGraficas.fecha_inicio
                    + "' and '" + InterGraficas.fecha_fin + "' group by fechaVenta;");
            ResultSet rs = pst.executeQuery();
            int contador = 0;
            while (rs.next()) {
                vector_fechaVentas[contador] = rs.getString("fechaVenta");
                listaFechas.add(vector_fechaVentas[contador]);
                vector_Status_Cantidad[contador] = rs.getInt("Ventas");
                listaCantidad.add(vector_Status_Cantidad[contador]);

                contador++;

            }
            cn.close();

        } catch (SQLException e) {

            System.out.println("Error en " + e);
        }
    }

    /**
     * Metodo para determinar cual es el dia de mayor ventas
     */
    public int MetodoMayorVenta(ArrayList<Integer> listaCantidad) {
        int mayor = 0;
        for (int i = 0; i < listaCantidad.size(); i++) {
            if (listaCantidad.get(i) > mayor) {
                mayor = listaCantidad.get(i);

            }

        }
        return mayor;
    }

    /**
     * Metodo dibuja gafricos
     */
    @Override
    public void paint(Graphics g) {
        super.paint(g);

        int mayorVenta = MetodoMayorVenta(listaCantidad);
        int largo_NuevoIngreso = 0;
        int parametro1 = 133;
        int parametroFecha = 118;
        int parametro3 = 100;
        for (int i = 0; i < listaCantidad.size(); i++) {
            largo_NuevoIngreso = listaCantidad.get(i) *400/mayorVenta;
            switch (i) {
                case 0:
                    g.setColor(new Color(140,0,75));
                    break;
                case 1:
                    g.setColor(new Color(255,127,0));
                    break;
                case 2:
                    g.setColor(new Color(17,251,216));
                    break;
                case 3:
                    g.setColor(new Color(255,0,75));
                    break;
                case 4:
                    g.setColor(new Color(100,0,75));
                    break;
                case 5:
                    g.setColor(new Color(255,255,255));
                    break;
                case 6:
                    g.setColor(new Color(0,85,0));
                    break;
                default:
                    g.setColor(new Color(0,0,255));
                    break;
            }
            g.fillRect(100, parametro3, largo_NuevoIngreso, 40);
            g.drawString(listaFechas.get(i),10, parametroFecha);
            g.drawString("Cantidad:  "+listaCantidad.get(i), 10, parametro1);
            parametro1+=50;
            parametroFecha+=50;
            parametro3+=50;
        }

    }

}

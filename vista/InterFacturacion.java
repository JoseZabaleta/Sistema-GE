package vista;

import conexion.Conexion;
import controlador.Ctrl_RegistraVenta;
import controlador.VentaPDF;
import java.awt.Dimension;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.CabeceraVenta;
import modelo.DetalleVenta;

/**
 *
 * @author josez
 */
// Clase para la regla
public class InterFacturacion extends javax.swing.JInternalFrame {

    //Modelo de datos
    private DefaultTableModel modeloDatosProducto;
    //lista para el detalle de venta de los productos
    ArrayList<DetalleVenta> listaProducto = new ArrayList<>();
    private DetalleVenta producto;

    private int idCliente = 0;

    private int idProducto = 0;
    private String nombre = "";
    private int cantidadBd = 0;
    private double preciouUnitario = 0.0;
    private int porcIva = 0;

    private int auxidDetalle = 1;

    private int cantidad = 0;//cantidad de productos a comprar
    private double subtotal = 0.0;//cantidad por precio
    private double descuento = 0.0;
    private double iva = 0.0;
    private double totalPagar = 0.0;

    //variable calculos globales
    private double subtotalGeneral = 0.0;
    private double descuentoGeneral = 0.0;
    private double ivaGeneral = 0.0;
    private double totalPagarGeneral = 0.0;

    /**
     * Creates new form InterFacturacion
     */
    public InterFacturacion() {
        initComponents();

        this.setSize(new Dimension(800, 600));
        this.setTitle("Facturacion");
        this.CargarComboCliente();
        this.CargarComboProductos();

        this.InicializarTablaProductos();
        txt_efectivo.setEnabled(false);
        jButton_calcularVuelto.setEnabled(false);
        txt_subtotal.setText("0,00");
        txt_iva.setText("0,00");
        txt_descuento.setText("0,00");
        txt_totalApagar.setText("0,00");

        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        lbl_wallpaper.setIcon(icono);
        this.repaint();

    }

    //metodo para inicializar la tabla de los producto
    private void InicializarTablaProductos() {
        modeloDatosProducto = new DefaultTableModel();
        //columnas
        modeloDatosProducto.addColumn("N");
        modeloDatosProducto.addColumn("Nombre");
        modeloDatosProducto.addColumn("Cantidad");
        modeloDatosProducto.addColumn("P.Unitario");
        modeloDatosProducto.addColumn("SubTotal");
        modeloDatosProducto.addColumn("Descuento");
        modeloDatosProducto.addColumn("Iva");
        modeloDatosProducto.addColumn("Total Pagar");
        modeloDatosProducto.addColumn("Accion");

        //Agregar los datos al modelo
        this.jTable_producos.setModel(modeloDatosProducto);

    }
    // Metodo para presentar la informacion de la tabla DetalleVenta

    private void listaTablaProductos() {
        this.modeloDatosProducto.setRowCount(listaProducto.size());
        for (int i = 0; i < listaProducto.size(); i++) {
            this.modeloDatosProducto.setValueAt(i + 1, i, 0);
            this.modeloDatosProducto.setValueAt(listaProducto.get(i).getNombre(), i, 1);
            this.modeloDatosProducto.setValueAt(listaProducto.get(i).getCantidad(), i, 2);
            this.modeloDatosProducto.setValueAt(listaProducto.get(i).getPrecioUnitario(), i, 3);
            this.modeloDatosProducto.setValueAt(listaProducto.get(i).getSubtotal(), i, 4);
            this.modeloDatosProducto.setValueAt(listaProducto.get(i).getDescuento(), i, 5);
            this.modeloDatosProducto.setValueAt(listaProducto.get(i).getIva(), i, 6);
            this.modeloDatosProducto.setValueAt(listaProducto.get(i).getTotalPagar(), i, 7);
            this.modeloDatosProducto.setValueAt("Eliminar", i, 8);//boton eliminar

        }
        //añadir Jtable
        jTable_producos.setModel(modeloDatosProducto);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_cliente = new javax.swing.JComboBox<>();
        jComboBox_producto = new javax.swing.JComboBox<>();
        txt_cliente_buscar = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        txt_producto_buscar = new javax.swing.JTextField();
        jButton_buscaCliente = new javax.swing.JButton();
        jButton_buscProducto = new javax.swing.JButton();
        jButton_añadirProducto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_producos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_subtotal = new javax.swing.JTextField();
        txt_descuento = new javax.swing.JTextField();
        txt_iva = new javax.swing.JTextField();
        txt_totalApagar = new javax.swing.JTextField();
        txt_efectivo = new javax.swing.JTextField();
        txt_vuelto = new javax.swing.JTextField();
        jButton_calcularVuelto = new javax.swing.JButton();
        jButton_REGISTRAR_VENTA = new javax.swing.JButton();
        lbl_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Facturación");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cliente:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Producto:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 80, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cantidad:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 70, 80, -1));

        jComboBox_cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Cliente:", " " }));
        getContentPane().add(jComboBox_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 170, -1));

        jComboBox_producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Producto:" }));
        jComboBox_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_productoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 170, -1));
        getContentPane().add(txt_cliente_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 150, -1));
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 70, 50, -1));

        txt_producto_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_producto_buscarActionPerformed(evt);
            }
        });
        getContentPane().add(txt_producto_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 150, -1));

        jButton_buscaCliente.setBackground(new java.awt.Color(204, 204, 204));
        jButton_buscaCliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_buscaCliente.setText("Buscar");
        jButton_buscaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscaClienteActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_buscaCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 130, -1));

        jButton_buscProducto.setBackground(new java.awt.Color(204, 204, 204));
        jButton_buscProducto.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_buscProducto.setText("Buscar");
        jButton_buscProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_buscProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 70, 130, -1));

        jButton_añadirProducto.setBackground(new java.awt.Color(204, 204, 204));
        jButton_añadirProducto.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_añadirProducto.setText("Añadir Productos");
        jButton_añadirProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_añadirProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_añadirProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 70, 100, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_producos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_producos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_producosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_producos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 190));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 770, 210));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Sub-Total:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Descuento:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Iva:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Total a pagar:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Efectivo:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Vuelto:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        txt_subtotal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_subtotal.setEnabled(false);
        jPanel2.add(txt_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 120, -1));

        txt_descuento.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_descuento.setEnabled(false);
        jPanel2.add(txt_descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 120, -1));

        txt_iva.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_iva.setEnabled(false);
        jPanel2.add(txt_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 120, -1));

        txt_totalApagar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_totalApagar.setEnabled(false);
        jPanel2.add(txt_totalApagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 120, -1));

        txt_efectivo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jPanel2.add(txt_efectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 120, -1));

        txt_vuelto.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_vuelto.setEnabled(false);
        jPanel2.add(txt_vuelto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, 120, -1));

        jButton_calcularVuelto.setBackground(new java.awt.Color(210, 254, 254));
        jButton_calcularVuelto.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_calcularVuelto.setText("Calcular Vuelto");
        jButton_calcularVuelto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calcularVueltoActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_calcularVuelto, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 130, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 390, 210));

        jButton_REGISTRAR_VENTA.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton_REGISTRAR_VENTA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/laser-printer-icon-outline-style-vector (1).jpg"))); // NOI18N
        jButton_REGISTRAR_VENTA.setText("Registra Venta");
        jButton_REGISTRAR_VENTA.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_REGISTRAR_VENTA.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_REGISTRAR_VENTA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_REGISTRAR_VENTAActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_REGISTRAR_VENTA, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, 170, 100));

        lbl_wallpaper.setBackground(new java.awt.Color(51, 255, 255));
        getContentPane().add(lbl_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_productoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_productoActionPerformed

    private void jButton_buscaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscaClienteActionPerformed
        // TODO add your handling code here:
        String clienteBuscar = txt_cliente_buscar.getText().trim();
        Connection cn = conexion.Conexion.conectar();
        String sql = "select nombre, apellido from tb_cliente where rut ='" + clienteBuscar + "'";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                jComboBox_cliente.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            } else {
                jComboBox_cliente.setSelectedItem("Seleccione Cliente:");
                JOptionPane.showMessageDialog(null, "Rut no encontrado");
            }
            txt_cliente_buscar.setText("");
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al buscar cliente" + e);
        }
    }//GEN-LAST:event_jButton_buscaClienteActionPerformed

    private void jButton_buscProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscProductoActionPerformed
        // TODO add your handling code here:
        String productoBuscar = txt_producto_buscar.getText().trim();
        Connection cn = conexion.Conexion.conectar();
        String sql = "SELECT nombre FROM tb_producto WHERE nombre LIKE ?";
        PreparedStatement pst;

        try {
            pst = cn.prepareStatement(sql);
            // Agregamos el comodín '%' al final del productoBuscar para buscar todas las coincidencias que comiencen con las tres primeras letras
            pst.setString(1, productoBuscar + "%");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                jComboBox_producto.setSelectedItem(rs.getString("nombre"));
            } else {
                jComboBox_producto.setSelectedItem("Seleccione Producto:");
                JOptionPane.showMessageDialog(null, "Nombre no encontrado");
            }
            txt_cliente_buscar.setText("");
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al buscar producto" + e);
        }
    }//GEN-LAST:event_jButton_buscProductoActionPerformed

    private void txt_producto_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_producto_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_producto_buscarActionPerformed

    private void jButton_añadirProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_añadirProductoActionPerformed
        String combo = this.jComboBox_producto.getSelectedItem().toString();

        // Validar que seleccione un producto
        if (combo.equalsIgnoreCase("Seleccione Producto:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        } else {
            // Validar que ingrese una cantidad
            if (txt_cantidad.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Ingrese cantidad de producto");
            } else {
                // Validar caracteres numéricos
                boolean validacion = validar(txt_cantidad.getText());

                if (validacion) {
                    // Validar que la cantidad sea mayor a cero
                    if (Integer.parseInt(txt_cantidad.getText()) > 0) {
                        cantidad = Integer.parseInt(txt_cantidad.getText());
                        //obtener datos de productos
                        this.DatosdelProducto();
                        //valiar que la cantidad no se mayor al stock
                        if (cantidad <= cantidadBd) {
                            subtotal = preciouUnitario * cantidad;
                            totalPagar = subtotal + iva + descuento;

                            //redondear decimales
                            subtotal = (double) Math.round(subtotal * 100) / 100;
                            iva = (double) Math.round(iva * 100) / 100;
                            descuento = (double) Math.round(descuento * 100) / 100;
                            totalPagar = (double) Math.round(totalPagar * 100) / 100;

                            // se crea un nuevo producto
                            producto = new DetalleVenta(auxidDetalle,
                                    1,
                                    idProducto,
                                    nombre,
                                    Integer.parseInt(txt_cantidad.getText()),
                                    preciouUnitario,
                                    subtotal,
                                    descuento,
                                    iva,
                                    totalPagar,
                                    1);
                            //añadir a la lista
                            listaProducto.add(producto);
                            JOptionPane.showMessageDialog(null, "Producto agregado");
                            auxidDetalle++;
                            txt_cantidad.setText("");
                            //Volver a cargar combo productos
                            this.CargarComboProductos();
                            this.CalcularTotalPagar();
                            txt_efectivo.setEnabled(true);
                            jButton_calcularVuelto.setEnabled(true);

                        } else {
                            JOptionPane.showMessageDialog(null, "Cantidad supera el stock");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Cantidad no puede ser menor o igual a 0");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese una cantidad válida, no se admiten caracteres");
                }
            }

        }
        this.listaTablaProductos();


    }//GEN-LAST:event_jButton_añadirProductoActionPerformed

    private void jButton_calcularVueltoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calcularVueltoActionPerformed
        if (!txt_efectivo.getText().isEmpty()) {
            //validar que no ingrese caracteres no numericos
            boolean validacion = validarDouble(txt_efectivo.getText());
            if (validacion == true) {
                double efect = Double.parseDouble(txt_efectivo.getText().trim());
                double top = Double.parseDouble(txt_totalApagar.getText().trim());
                if (efect < top) {
                    JOptionPane.showMessageDialog(null, "Efectivo no es suficiente para pagar");
                } else {
                    double cambio = (efect - top);
                    double cambio_2 = (double) Math.round(cambio * 100d) / 100;
                    String cambioU = String.valueOf(cambio_2);
                    txt_vuelto.setText(cambioU);

                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese solo caracteres numericos");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese dinero en efectivo para calcular cambio");
        }
    }//GEN-LAST:event_jButton_calcularVueltoActionPerformed
    int idArrayList = 0;
    private void jTable_producosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_producosMouseClicked

        int fila_point = jTable_producos.rowAtPoint(evt.getPoint());
        int columna_point = 0;
        if (fila_point > -1) {
            idArrayList = (int) modeloDatosProducto.getValueAt(fila_point, columna_point);
        }
        int opcion = JOptionPane.showConfirmDialog(null, "Eliminara Producto?");
        //opciones de confir dialog(si = 0, no = 1, cancel =2, close = -1)
        switch (opcion) {
            case 0://si
                listaProducto.remove(idArrayList - 1);
                this.CalcularTotalPagar();
                this.listaTablaProductos();
                break;
            case 1: //no, hara nada
                break;

            default:// otra opcion cualquiera
                break;
        }
    }//GEN-LAST:event_jTable_producosMouseClicked

    private void jButton_REGISTRAR_VENTAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_REGISTRAR_VENTAActionPerformed
        CabeceraVenta cabeceraVenta = new CabeceraVenta();
        DetalleVenta detalleVenta = new DetalleVenta();
        Ctrl_RegistraVenta controlregistroVenta = new Ctrl_RegistraVenta();

        String fechaActual = "";
        Date date = new Date();
        fechaActual = new SimpleDateFormat("yyyy/MM/dd").format(date);
        if (!jComboBox_cliente.getSelectedItem().equals("Seleccion Cliente:")) {
            if (listaProducto.size() > 0) {
                //metodo para obtener el id_cliente
                this.ObtnerIdCliente();
                //registrar cabecera
                cabeceraVenta.setIdCabeceraVenta(0);
                cabeceraVenta.setIdCliente(idCliente);
                cabeceraVenta.setValorPagar(Double.parseDouble(txt_totalApagar.getText()));
                cabeceraVenta.setFechaVenta(fechaActual);
                cabeceraVenta.setEstado(1);
                if (controlregistroVenta.guardarCabecera(cabeceraVenta)) {
                    JOptionPane.showMessageDialog(null, "Venta Registrada");
                    //Generar Docuemto Venta
                    VentaPDF pdf = new VentaPDF();
                    pdf.datosCliente(idCliente);
                    pdf.generarFactura();

//guardar detalle venta
                    for (DetalleVenta elemento : listaProducto) {
                        detalleVenta.setIdDetalletVenta(0);
                        detalleVenta.setIdCabeceraVenta(0);
                        detalleVenta.setIdProducto(elemento.getIdProducto());
                        detalleVenta.setCantidad(elemento.getCantidad());
                        detalleVenta.setPrecioUnitario(elemento.getPrecioUnitario());
                        detalleVenta.setSubtotal(elemento.getSubtotal());
                        detalleVenta.setDescuento(elemento.getDescuento());
                        detalleVenta.setIva(elemento.getIva());
                        detalleVenta.setTotalPagar(elemento.getTotalPagar());
                        detalleVenta.setEstado(1);
                        if (controlregistroVenta.guardarDetalle(detalleVenta)) {

                            System.out.println("detalle de venta registrado");
                            txt_subtotal.setText("0.0");
                            txt_iva.setText("0.0");
                            txt_descuento.setText("0.0");
                            txt_totalApagar.setText("0.0");
                            txt_efectivo.setText("0.0");
                            txt_vuelto.setText("0.0");
                            auxidDetalle = 1;

                            this.CargarComboCliente();
                            this.RestarStockProductos(elemento.getIdProducto(), elemento.getCantidad());

                        } else {
                            JOptionPane.showMessageDialog(null, "Error al guardar detalle de venta");
                        }
                    }
                    listaProducto.clear();
                    listaTablaProductos();

                } else {
                    JOptionPane.showMessageDialog(null, "Error al guardar cabecera venta");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Seleccione producto");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Sleccione un cliente");
        }


    }//GEN-LAST:event_jButton_REGISTRAR_VENTAActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_REGISTRAR_VENTA;
    private javax.swing.JButton jButton_añadirProducto;
    private javax.swing.JButton jButton_buscProducto;
    private javax.swing.JButton jButton_buscaCliente;
    private javax.swing.JButton jButton_calcularVuelto;
    private javax.swing.JComboBox<String> jComboBox_cliente;
    private javax.swing.JComboBox<String> jComboBox_producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JPanel jPanel2;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_producos;
    private javax.swing.JLabel lbl_wallpaper;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_cliente_buscar;
    private javax.swing.JTextField txt_descuento;
    private javax.swing.JTextField txt_efectivo;
    private javax.swing.JTextField txt_iva;
    private javax.swing.JTextField txt_producto_buscar;
    private javax.swing.JTextField txt_subtotal;
    public static javax.swing.JTextField txt_totalApagar;
    private javax.swing.JTextField txt_vuelto;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo para cargar clientes en el combobox
     */
    private void CargarComboCliente() {
        Connection cn = conexion.Conexion.conectar();
        String sql = "select *from tb_cliente";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_cliente.removeAllItems();
            jComboBox_cliente.addItem("Seleccione Cliente:");
            while (rs.next()) {
                jComboBox_cliente.addItem(rs.getString("nombre") + " " + rs.getString("apellido"));

            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al cargar clientes");
        }
    }

    /**
     * Metodo para cargar productos en el combobox
     */
    private void CargarComboProductos() {
        Connection cn = conexion.Conexion.conectar();
        String sql = "select *from tb_producto";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_producto.removeAllItems();
            jComboBox_producto.addItem("Seleccione Producto:");
            while (rs.next()) {
                jComboBox_producto.addItem(rs.getString("nombre"));

            }
            cn.close();

        } catch (Exception e) {
            System.out.println("Error al cargar productos");
        }
    }

    /**
     * Metodo para validar caracteres numericos
     */
    private boolean validar(String valor) {
        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;

        }

    }

    private boolean validarDouble(String valor) {
        try {
            double num = Double.parseDouble(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;

        }

    }

    /**
     * Metodo para mostrar datos del producto seleccionado
     */
    private void DatosdelProducto() {
        try {
            String sql = "select *from tb_producto where nombre ='" + this.jComboBox_producto.getSelectedItem() + "'";
            Connection cn = conexion.Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idProducto = rs.getInt("idProducto");
                nombre = rs.getString("nombre");
                cantidadBd = rs.getInt("cantidad");
                preciouUnitario = rs.getDouble("precio");
                porcIva = rs.getInt("porcentajeIva");
                this.CalcularIva(preciouUnitario, porcIva); // calcula y retorna iva

            }
        } catch (SQLException e) {
            System.out.println("Error al obtener los datos del producto" + e);
        }
    }

    /**
     * Metodo para calcular iva
     */
    private double CalcularIva(double precio, int porcentajeIva) {
        int p_iva = porcentajeIva;

        switch (p_iva) {
            case 0:
                iva = 0.0;
                break;
            case 19:
                iva = (precio * cantidad) * 0.19;
                break;
            default:
                break;
        }
        return iva;

    }

    /**
     * Metodo para calcular total
     */
    private void CalcularTotalPagar() {
        subtotalGeneral = 0;
        descuentoGeneral = 0;
        ivaGeneral = 0;
        totalPagarGeneral = 0;

        for (DetalleVenta elemento : listaProducto) {
            subtotalGeneral += elemento.getSubtotal();
            descuentoGeneral += elemento.getDescuento();
            ivaGeneral += elemento.getIva();
            totalPagarGeneral += elemento.getTotalPagar();

        }
        // redonderar decimal
        subtotalGeneral = (double) Math.round(subtotalGeneral * 100) / 100;
        descuentoGeneral = (double) Math.round(descuentoGeneral * 100) / 100;
        ivaGeneral = (double) Math.round(ivaGeneral * 100) / 100;
        totalPagarGeneral = (double) Math.round(totalPagarGeneral * 100) / 100;

        //enviar datos a la interfaz de totales
        txt_subtotal.setText(String.valueOf(subtotalGeneral));
        txt_iva.setText(String.valueOf(ivaGeneral));
        txt_descuento.setText(String.valueOf(descuentoGeneral));
        txt_totalApagar.setText(String.valueOf(totalPagarGeneral));

    }

    /**
     * Metod para obtener id cliente
     */
    private void ObtnerIdCliente() {
        try {
            String sql = "select *from tb_cliente where concat(nombre, ' ' , apellido) = '" + this.jComboBox_cliente.getSelectedItem() + "'";
            Connection cn = conexion.Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idCliente = rs.getInt("idCliente");

            }
        } catch (SQLException e) {
            System.out.println("Error al obtener id cliente" + e);
        }

    }

    // Restar stock de productos vendidos
    public void RestarStockProductos(int idProducto, int cantidad) {
        int cantidadProductosBD = 0;
        try {
            Connection cn = Conexion.conectar();
            String sql = "select idProducto, cantidad from tb_producto where idProducto = '" + idProducto + "'";
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cantidadProductosBD = rs.getInt("cantidad");

            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al descontar stock" + e);
        }
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement consulta = cn.prepareStatement("update tb_producto set cantidad=? where idProducto ='" + idProducto + "'");
            int cantidadAct = cantidadProductosBD - cantidad;
            consulta.setInt(1, cantidadAct);
            if (consulta.executeUpdate() > 0) {

            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al descontar stock 1 " + e);
        }
    }

}

package vista;

import conexion.Conexion;
import controlador.Ctrl_Asignacion;
import controlador.Ctrl_Merma;
import controlador.Ctrl_Producto;
import java.awt.Color;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import modelo.Asignacion;
import modelo.Merma;
import modelo.Producto;

/**
 *
 * @author josez
 */
public class InterMerma extends javax.swing.JInternalFrame {

    int obetenerIdProducto = 0;
    int obtenerBd = 0;

    /**
     * Creates new form InterProducto
     */
    public InterMerma() {

        initComponents();
        this.setSize(new Dimension(600, 350));
        this.setTitle("Nuevo registro de Merma");
        this.CargarComboProducto();

    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        lbl_descripcion = new javax.swing.JLabel();
        lbl_idSupervisor = new javax.swing.JLabel();
        lbl_idEmpleado = new javax.swing.JLabel();
        txt_descripcion = new javax.swing.JTextField();
        jButton_Guardar = new javax.swing.JButton();
        ComboBox_producto = new javax.swing.JComboBox<>();
        txt_cantidad = new javax.swing.JTextField();
        jButton_buscProducto = new javax.swing.JButton();
        txt_producto_buscar = new javax.swing.JTextField();
        lbl_idEmpleado1 = new javax.swing.JLabel();
        jLabel_wallpaper = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nuevo Merma");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        lbl_descripcion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_descripcion.setForeground(new java.awt.Color(255, 255, 255));
        lbl_descripcion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_descripcion.setText("Descripci√≥n:");
        getContentPane().add(lbl_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 100, -1));

        lbl_idSupervisor.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_idSupervisor.setForeground(new java.awt.Color(255, 255, 255));
        lbl_idSupervisor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_idSupervisor.setText("Cantidad:");
        getContentPane().add(lbl_idSupervisor, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 110, -1));

        lbl_idEmpleado.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_idEmpleado.setForeground(new java.awt.Color(255, 255, 255));
        lbl_idEmpleado.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_idEmpleado.setText("Producto");
        getContentPane().add(lbl_idEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 140, -1));

        txt_descripcion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_descripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_descripcionActionPerformed(evt);
            }
        });
        getContentPane().add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 170, -1));

        jButton_Guardar.setBackground(new java.awt.Color(0, 204, 204));
        jButton_Guardar.setText("Guardar");
        jButton_Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GuardarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_Guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 220, 120, 40));

        ComboBox_producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", " ", " " }));
        ComboBox_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox_productoActionPerformed(evt);
            }
        });
        getContentPane().add(ComboBox_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 170, -1));

        txt_cantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cantidadActionPerformed(evt);
            }
        });
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 170, -1));

        jButton_buscProducto.setBackground(new java.awt.Color(204, 204, 204));
        jButton_buscProducto.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_buscProducto.setText("Buscar");
        jButton_buscProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_buscProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 140, -1, -1));

        txt_producto_buscar.setToolTipText("");
        txt_producto_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_producto_buscarActionPerformed(evt);
            }
        });
        getContentPane().add(txt_producto_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, 150, -1));

        lbl_idEmpleado1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_idEmpleado1.setForeground(new java.awt.Color(255, 255, 255));
        lbl_idEmpleado1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_idEmpleado1.setLabelFor(txt_producto_buscar);
        lbl_idEmpleado1.setText("Buscar producto");
        lbl_idEmpleado1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lbl_idEmpleado1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, 140, -1));

        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo3.jpg"))); // NOI18N
        jLabel_wallpaper.setToolTipText("");
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 310));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_descripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_descripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_descripcionActionPerformed

    private void jButton_GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GuardarActionPerformed
        // TODO add your handling code here:
        Merma merma = new Merma();
        Ctrl_Merma controlMerma = new Ctrl_Merma();

        String producto = "";
        int cantidad = Integer.parseInt(txt_cantidad.getText().trim());

        producto = ComboBox_producto.getSelectedItem().toString().trim();

        //VALIDAR CAMPOS
        if (ComboBox_producto.getSelectedItem().equals("seleccione producto:")
                || txt_descripcion.getText().equals("")
                || txt_cantidad.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");

        } else {
            //consulta para validar duplicidad de producto

            if (producto.equalsIgnoreCase("Seleccione codigo:")) {
                JOptionPane.showMessageDialog(null, "Seleccione producto");
            } else {
                if (txt_descripcion.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Indique descripcion");
                } else {
                    if (txt_cantidad.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Ingrese cantidad");
                    } else {
                        try {
                            this.ObtenerIdProducto();
                            merma.setIdProducto(obetenerIdProducto);

                            merma.setDescripcion(txt_descripcion.getText().trim());
                            Date fechaActual = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            String fechaComoString = sdf.format(fechaActual);
                            merma.setFecha(fechaComoString);

                            merma.setCantidad(Integer.parseInt(txt_cantidad.getText().trim()));

                            this.ObtenerBd();

                            if (obtenerBd < cantidad) {
                                JOptionPane.showMessageDialog(null, "La cantidad merma es mayor que el stock="+obtenerBd);

                            } else {
                                if (controlMerma.guardar(merma)) {
                                this.RestarStockProductos(merma.getIdProducto(), merma.getCantidad());
                                JOptionPane.showMessageDialog(null, "Registro Guardado");
                                this.CargarComboProducto();
                                

                            } else {
                                JOptionPane.showMessageDialog(null, "Error al guardar producto");
                            }
                                LimpiarCampos();
                            }

                            

                        } catch (NumberFormatException e) {
                            System.out.println("Error en : " + e);
                        }
                    }

                }

            }
    }//GEN-LAST:event_jButton_GuardarActionPerformed
    }
    private void ComboBox_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox_productoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBox_productoActionPerformed

    private void txt_cantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cantidadActionPerformed

    private void jButton_buscProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscProductoActionPerformed
        // TODO add your handling code here:
        String productoBuscar = txt_producto_buscar.getText().trim();
        Connection cn = conexion.Conexion.conectar();
        String sql = "SELECT idProducto , nombre FROM tb_producto WHERE nombre LIKE ?";
        PreparedStatement pst;

        try {
            pst = cn.prepareStatement(sql);
            // Agregamos el comod√≠n '%' al final del productoBuscar para buscar todas las coincidencias que comiencen con las tres primeras letras
            pst.setString(1, productoBuscar + "%");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                ComboBox_producto.setSelectedItem(rs.getInt("IdProducto")+" "+rs.getString("nombre"));
            } else {
                ComboBox_producto.setSelectedItem("Seleccione Producto:");
                JOptionPane.showMessageDialog(null, "Nombre no encontrado");
            }
            
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al buscar producto" + e);
        }
    }//GEN-LAST:event_jButton_buscProductoActionPerformed

    private void txt_producto_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_producto_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_producto_buscarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBox_producto;
    private javax.swing.JButton jButton_Guardar;
    private javax.swing.JButton jButton_buscProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbl_descripcion;
    private javax.swing.JLabel lbl_idEmpleado;
    private javax.swing.JLabel lbl_idEmpleado1;
    private javax.swing.JLabel lbl_idSupervisor;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_producto_buscar;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * metodo limpiar campos
     */
    private void LimpiarCampos() {
        txt_cantidad.setText("");
        txt_descripcion.setText("");
        ComboBox_producto.setSelectedItem("Seleccione producto");

    }

    /**
     * *
     * metodo para cargar categorias en combo box
     */
    private void CargarComboProducto() {
        Connection cn = conexion.Conexion.conectar();
        String sql = "select *from tb_producto";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            ComboBox_producto.removeAllItems();//remueve items por defecto
            ComboBox_producto.addItem("Seleccione producto:");

            while (rs.next()) {
                ComboBox_producto.addItem(rs.getInt("idProducto") + " " + rs.getString("Nombre"));

            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al cargar productos");
        }

    }

    /**
     * *
     * metodo para obtener productos en combo box
     */
    private int ObtenerIdProducto() {
        String sql = "select * from tb_producto where idProducto ='" + ComboBox_producto.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = conexion.Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obetenerIdProducto = rs.getInt("idProducto");

            }
        } catch (SQLException e) {
            System.out.println("Error al obtener id producto");
        }
        return obetenerIdProducto;
    }

    public int RestarStockProductos(int idProducto, int cantidad) {
        int cantidadProductosBD = 0;
        try {
            Connection cn = Conexion.conectar();
            String sql = "select idProducto, cantidad from tb_producto where idProducto = '" + idProducto + "'";
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cantidadProductosBD = rs.getInt("cantidad");

            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al descontar stock" + e);
        }
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement consulta = cn.prepareStatement("update tb_producto set cantidad=? where idProducto ='" + idProducto + "'");
            int cantidadAct = cantidadProductosBD - cantidad;

            consulta.setInt(1, cantidadAct);
            if (cantidad > cantidadProductosBD) {
                System.out.println("Cantidad es mayor al stock");
            } else {
                if (consulta.executeUpdate() > 0) {

                }
            }

            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al descontar stock 1 " + e);
        }
        return cantidadProductosBD;
    }
        private int ObtenerBd() {
        String sql = "select * from tb_producto where idProducto ='" + ComboBox_producto.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = conexion.Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerBd = rs.getInt("cantidad");
                System.out.println("Valor de obtenerBd: " + obtenerBd); 

            }
        } catch (SQLException e) {
            System.out.println("Error al obtener cantidad");
        }
        return obtenerBd;
    }

}
